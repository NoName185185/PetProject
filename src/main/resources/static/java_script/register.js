function openRegistrationModal() {
  sessionStorage.setItem("previousPath", window.location.pathname);

  const modalHTML = `
    <div class="modal-overlay" id="registrationModal">
      <div class="modal" style="height:55%">
        <button class="close-btn" onclick="closeModal()">√ó</button>
        <h2>–¢—ñ—Ä–∫–µ–ª—É</h2>

        <input type="text" id="nick_name" placeholder="–°—ñ–∑–¥—ñ“£ –Ω–∏–∫–Ω–µ–π–º—ñ“£—ñ–∑">

        <input type="text" id="username" placeholder="example@gmail.com">

        <div class="password-wrapper">
          <input type="password" id="password1" placeholder="“ö“±–ø–∏—è —Å”©–∑—ñ“£—ñ–∑–¥—ñ –∂–∞–∑—ã“£—ã–∑">
          <span class="toggle-password" onclick="togglePassword('password1', this)">üëÅÔ∏è</span>
        </div>

        <div class="password-wrapper">
          <input type="password" id="password2" placeholder="“ö“±–ø–∏—è —Å”©–∑–¥—ñ “õ–∞–π—Ç–∞ –∂–∞–∑—ã“£—ã–∑">
          <span class="toggle-password" onclick="togglePassword('password2', this)">üëÅÔ∏è</span>
        </div>

        <button class="submit-btn" onclick="handleSubmit()">–†–∞—Å—Ç–∞—É</button>
        <a href="#" class="login-link">–ú–µ–Ω—ñ“£ –µ—Å–µ–ø—Ç—ñ–∫ –∂–∞–∑–±–∞–º –±–∞—Ä</a>
      </div>
    </div>
  `;

  document.getElementById("modal-container").innerHTML = modalHTML;

  document.getElementById("registrationModal").addEventListener("click", function (e) {
    if (e.target === this) closeModal();
  });
}

function togglePassword(inputId, iconElement) {
  const input = document.getElementById(inputId);
  if (input.type === "password") {
    input.type = "text";
    iconElement.textContent = "üôà";
  } else {
    input.type = "password";
    iconElement.textContent = "üëÅÔ∏è";
  }
}
function closeModal() {
  document.getElementById("modal-container").innerHTML = "";
}

function validateEmail(email) {
  const emailRegex = /^[a-zA-Z0-9._%+-]+@gmail\.com$/;
  return emailRegex.test(email);
}

function validatePassword(password) {
  const hasMinLength = password.length >= 8;
  const noSpecialForbidden = !/[!@#$]/.test(password);
  const hasUpper = /[A-Z]/.test(password);
  const hasLower = /[a-z]/.test(password);
  return hasMinLength && noSpecialForbidden && hasUpper && hasLower;
}

function handleSubmit() {
  const username = document.getElementById("username").value.trim();
  const nickName = document.getElementById("nick_name").value.trim();
  const password1 = document.getElementById("password1").value;
  const password2 = document.getElementById("password2").value;

  if (!username || !nickName || !password1 || !password2) {
    alert("–ë–∞—Ä–ª—ã“õ ”©—Ä—ñ—Å—Ç–µ—Ä —Ç–æ–ª—Ç—ã—Ä—ã–ª—É—ã —Ç–∏—ñ—Å!");
    return;
  }

  if (!validateEmail(username)) {
    alert("–≠–ª–µ–∫—Ç—Ä–æ–Ω–¥—ã“õ –ø–æ—à—Ç–∞ —Ñ–æ—Ä–º–∞—Ç—ã –¥“±—Ä—ã—Å –µ–º–µ—Å (—Ç–µ–∫ gmail.com —Ä“±“õ—Å–∞—Ç –µ—Ç—ñ–ª–≥–µ–Ω).");
    return;
  }

  if (!validatePassword(password1)) {
    alert("“ö“±–ø–∏—è —Å”©–∑ —à–∞—Ä—Ç—Ç–∞—Ä“ì–∞ —Å”ô–π–∫–µ—Å –∫–µ–ª–º–µ–π–¥—ñ.");
    return;
  }

  if (password1 !== password2) {
    alert("“ö“±–ø–∏—è —Å”©–∑–¥–µ—Ä —Å”ô–π–∫–µ—Å –∫–µ–ª–º–µ–π–¥—ñ!");
    return;
  }

  const userAva = "https://www.svgrepo.com/show/444846/person-boy.svg";

  const registrationData = {
    username: username,
    nick_name: nickName,
    password: password1,
    user_ava: userAva
  };

  fetch("/api/register", {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify(registrationData)
  })
  .then(async response => {
    const data = await response.json();
    if (!response.ok) {
      throw new Error(data.message || "–¢—ñ—Ä–∫–µ–ª—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã");
    }
    if (!data.userId) {
      throw new Error("“ö–æ–ª–¥–∞–Ω—É—à—ã ID “õ–∞–π—Ç–∞—Ä—ã–ª–º–∞–¥—ã");
    }
    window.location.href = `/${data.userId}/main_registered`;
  })
  .catch(error => {
    alert(error.message);
  });
}


function registerUser(username, password) {
fetch("/api/register", {
  method: "POST",
  headers: {
    "Content-Type": "application/json"
  },
  body: JSON.stringify(registrationData)
})
.then(async response => {
  const data = await response.json();
  if (!response.ok) {
    throw new Error(data.message || "–¢—ñ—Ä–∫–µ–ª—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã");
  }
  if (!data.userId) {
    throw new Error("“ö–æ–ª–¥–∞–Ω—É—à—ã ID “õ–∞–π—Ç–∞—Ä—ã–ª–º–∞–¥—ã");
  }
  window.location.href = `/${data.userId}/main_registered`;
})
.catch(error => {
  alert(error.message);
});


}
